buildscript {
  dependencies {
    classpath group: "com.liferay", name: "com.liferay.gradle.plugins.wsdl.builder", version: "2.0.3"
  }

  repositories {
    maven {
      url "https://repository-cdn.liferay.com/nexus/content/groups/public"
    }
  }
}

apply plugin: "com.liferay.wsdl.builder"

allprojects {
  apply plugin: "java"
  sourceCompatibility = 1.8
  version = '1.0.0'
  repositories {
    mavenCentral()
  }
  
  sourceSets {
    main {
      java {
        srcDir 'build/codegen'
        srcDir 'src/main/java'
      }
    }
  }
  
  dependencies {
    implementation group: 'com.google.guava', name: 'guava', version: '16.0.1'
    implementation group: 'javax.xml', name: 'jaxrpc-api', version: '1.1'
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.6.1'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.7'
    implementation group: 'commons-discovery', name: 'commons-discovery', version: '0.5'
    implementation group: 'org.apache.axis', name: 'axis', version: '1.4'
    implementation group: 'commons-logging', name: 'commons-logging', version: '1.1.1'
    implementation group: 'wsdl4j', name: 'wsdl4j', version: '1.6.3'
    implementation group: 'net.sf.jpf', name: 'jpf', version: '1.5'
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.0'
    implementation fileTree(dir : '../Platform/Plugins/com.tle.platform.common/target/scala-2.12', include:['*.jar'])
    implementation fileTree(dir : '../Source/Plugins/Platform/com.tle.platform.swing/target/scala-2.12', include:['*.jar'])
    testImplementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.6.1'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
  }
}

subprojects {
  apply plugin: "application"
}

task importToolJar(type: Jar) {
  baseName = 'import-tool'
  manifest {
    attributes('Main-Class':'com.dytech.edge.importexport.importutil.ImportUtility',
      'Implementation-Title':'import-tool',
      'Implementation-Version': version,
    )
  }
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
  with jar
}

task exportToolJar(type: Jar) {
  baseName = 'export-tool'
  manifest {
    attributes('Main-Class':'com.dytech.edge.importexport.exportutil.ExportUtility',
      'Implementation-Title':'export-tool',
      'Implementation-Version': version,
    )
  }
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
  with jar
}

task createImportExportTools(dependsOn : [importToolJar,exportToolJar] ) {
  doLast {
    println "Import and export tools are created under $projectDir/build/libs"
  }
}

task compileSbtProject(type: Exec) {
  //sbt assembly is only available when called from sbt root project
  workingDir "../"
  commandLine "sbt","com_tle_platform_swing/assembly","com_tle_platform_common/assembly"
}

// buildWSDL is a task provided by plugin: "com.liferay.wsdl.builder"
buildWSDL {
  destinationDir = file("build/codegen")
  generateOptions.mappings = ["http://soap.remoting.web.tle.com" : "com.tle.web.remoting.soap", "http://lang.java":"com.tle.web.remoting.exception"]
  buildLibs = false
  includeWSDLs = false
}

//We do not need the jar task executed to create a jar of the whole project so disable it
jar.enabled = false
compileJava.dependsOn([buildWSDL,compileSbtProject] as Object[])
assemble.finalizedBy(createImportExportTools)
