<project name="applet-common" basedir=".">
	<property name="compile.for.server" value="false" />
	<import file="../../build/plugins-common-build.xml" />
	<dirname property="applet-common.basedir" file="${ant.file.applet-common}"/>
	<taskdef resource="proguard/ant/task.properties" classpathref="customtasks.classpath" />
	<taskdef name="removePaths" classname="com.tle.ant.RemovePathEntries" classpathref="customtasks.classpath" />
	<property name="appletcommonbase.plugin" location="${applet-common.basedir}/../com.tle.common.applet.base/" />
	<property name="applet.jar.dest" value="${basedir}/resources/web/" />
	
	<proguardconfiguration id="common.config">
		-include ../../../common-build.pro

		-keep class * extends com.tle.web.appletcommon.AbstractAppletLauncher {
			*;
		}

		-keep class org.apache.commons.logging.** {
			*;
		}
		
		-keep class org.slf4j.** {
			*;
		}
		
		-keep class org.apache.log4j.Logger {
			*;
		}

		-keep class com.vladium.** {
			*;
		}
		
		-keep class com.tle.exceptions.** {
			*;
		}
		
		-keep class org.springframework.** {
			*;
		}
		
		-dontwarn javax.**,org.jvnet.**,com.thoughtworks.xstream.**,org.apache.commons.**,com.zaxxer.hikari.**,org.springframework.**,org.jboss.resteasy.**
		-dontnote
		-injars ${source.base}/version.properties
	</proguardconfiguration>

	<target name="make" depends="buildapplet" />
	
	<target name="clean" depends="common.clean">
	    <delete file="${applet.jar.dest}/${applet.jar.name}" />
	</target>

	<target name="buildapplet" depends="common-ant.make">
		
		<eclipseClasspathCustom basedir="${appletcommonbase.plugin}" pathid="proguard.libraryjars" />
		
		<removePaths in="eclipse.classpath" remove="proguard.libraryjars" out="proguard.injars" />
		
		<property name="plib" refid="proguard.libraryjars"/>
		<property name="pin" refid="proguard.injars"/>
		<echo message="proguard.libraryjars = ${plib}"/>
		<echo message="proguard.injars = ${pin}"/>
		
		<proguard obfuscate="false" optimize="false">
			<configuration refid="common.config" />
			<configuration refid="config" />
			<injar refid="proguard.injars" />
			<libraryjar refid="proguard.libraryjars" />
			<outjar file="${staging}/${applet.jar.name}" filter="!META-INF/**,!plugin-jpf.xml" />
		</proguard>
		<jar update="true" destfile="${staging}/${applet.jar.name}">
			<manifest>
				<attribute name="Codebase" value="*"/>
				<attribute name="Application-Library-Allowable-Codebase" value="*" />
				<attribute name="Caller-Allowable-Codebase" value="*" />
				<attribute name="Permissions" value="all-permissions"/>
				<attribute name="Application-Name" value="${applet.title}"/>
				<attribute name="Version" value="${version.mm}"/>
				<!--
http://www.oracle.com/technetwork/java/javase/7u45-relnotes-2016950.html
Synopsis: Caller-Allowable-Codebase may be ignored when used with Trusted-Library.

If a trusted, signed JAR file is using the Caller-Allowable-Codebase manifest attribute along with Trusted-Library 
then the Caller-Allowable-Codebase manifest entry will be ignored and, as a result, a JavaScript -> Java call will show the native LiveConnect warning. 
The workaround is to remove the Trusted-Library manifest entry.
				-->
				<!--<attribute name="Trusted-Library" value="true"/>-->
			</manifest>
		</jar>
		<easy-sign-jar src="${staging}/${applet.jar.name}" dest="${applet.jar.dest}/${applet.jar.name}" />
	</target>

</project>