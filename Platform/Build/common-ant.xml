<?xml version="1.0" encoding="UTF-8"?>

<project name="common-ant">

	<dirname property="common-ant.dir" file="${ant.file.common-ant}"/>
	<import file="${common-ant.dir}/common-tasks.xml"/>

	<!--
		#######################################################################
			Generic Properties
		#######################################################################
	-->

	<property name="build" location="classes" />
	<property name="src" location="src" />
	<property name="gensrc" location="gensrc" />

	<property name="staging" location="staging" />
	<property name="product" location="product" />

	<property name="test.src" location="test" />
	<property name="test.build" location="test.classes" />
	<property name="test.reports" location="test.reports" />

	<property name="coverage.data" location="coverage.data" />

	<available file="${src}" type="dir" property="src.enabled" />
	<available file="${test.src}" type="dir" property="tests.enabled" />

	<!--
		#######################################################################
			Common Macros and Tasks
		#######################################################################
	-->

	<macrodef name="standard-javac">
		<attribute name="build" />
		<attribute name="src" />
		<element name="javac-body" implicit="yes" />
		<sequential>
			<fail unless="javac.target">'javac.target' must have been defined</fail>
			<echo message="Compiling with javac target of ${javac.target} and source ${javac.source}" />
			<javac  destdir="@{build}" nowarn="${javac.nowarn}" debug="${javac.debug}"
					debuglevel="${javac.debuglevel}" optimize="${javac.optimize}" target="${javac.target}"
					source="${javac.source}" deprecation="off" verbose="${javac.verbose}" depend="${javac.depend}"
					includeantruntime="false">
				<javac-body />
				<src path="@{src}" />
			</javac>
	    </sequential>
	</macrodef>

	<macrodef name="minimal-jar">
		<attribute name="classlist" />
		<attribute name="dest" />
		<element name="jars-to-unzip" optional="false" implicit="true"/>
		<sequential>
			<echo>Creating minimal jar @{dest}</echo>
			<property name="minimal-jar-temp" location="minimal-jar-temp" />
			<delete dir="${minimal-jar-temp}" />
			<mkdir dir="${minimal-jar-temp}" />
			<unzip dest="${minimal-jar-temp}">
				<jars-to-unzip />
			</unzip>
			<jar destfile="@{dest}">
				<fileset dir="${minimal-jar-temp}" includesfile="@{classlist}" />
			</jar>
			<delete dir="${minimal-jar-temp}" />
		</sequential>
	</macrodef>

	<!-- Sign a jar and move it to the destination jar name -->
	<macrodef name="easy-sign-jar">
		<attribute name="src" />
		<attribute name="dest" />
		<sequential>
			<echo message="Signing JAR: @{src}" />
			<dirname property="destdir" file="@{dest}" />
			<mkdir dir="${destdir}" />
			<signjar jar="@{src}"
				signedjar="@{dest}"
				alias="${tle.signer.alias}"
				keystore="${source.base}/${tle.signer.certificate}"
				storepass="${tle.signer.password}" />
		</sequential>
	</macrodef>

	<!-- Sign a jar in-place -->
	<macrodef name="quick-sign-jar">
		<attribute name="jar" />
		<sequential>
			<tempfile property="tempjar" suffix=".jar" />
			<easy-sign-jar src="@{jar}" dest="${tempjar}" />
			<move file="${tempjar}" tofile="@{jar}" />
		</sequential>
	</macrodef>

	<patternset id="patternset.exclude.java.and.scm">
		<exclude name="**/*.java" />
	</patternset>

	<!--
		#######################################################################
			Generic Build Targets
		#######################################################################
	-->

	<target name="clean">
        <delete dir="${gensrc}" />
		<delete dir="${build}" />
        <delete dir="${staging}" />
        <delete dir="${product}" />
		<delete dir="${test.build}" />
		<delete dir="${test.reports}" />
		<delete dir="${coverage.data}" />
	</target>

	<target name="init" depends="define-customtasks">
		<mkdir dir="${gensrc}" />
		<mkdir dir="${build}" />
		<mkdir dir="${staging}" />
		<mkdir dir="${product}" />
		<mkdir dir="${coverage.data}" />

		<condition property="javac.target" value="${javac.compat.target}">
			<and>
				<isset property="compile.for.javacompat" />
				<istrue value="${compile.for.javacompat}" />
			</and>
		</condition>
		<condition property="javac.target" value="${javac.server.target}" else="${javac.client.target}">
			<and>
				<isset property="compile.for.server" />
				<istrue value="${compile.for.server}" />
			</and>
		</condition>
		
		<condition property="javac.source" value="${javac.compat.source}">
			<and>
				<isset property="compile.for.javacompat" />
				<istrue value="${compile.for.javacompat}" />
			</and>
		</condition>
		<condition property="javac.source" value="${javac.server.source}" else="${javac.client.source}">
			<and>
				<isset property="compile.for.server" />
				<istrue value="${compile.for.server}" />
			</and>
		</condition>
		
		<jpf-info manifest="${basedir}/plugin-jpf.xml" propertyid="plugin.id" propertyversion="plugin.version" />
	</target>

	<target name="define-build.classpath" depends="init">
		<fail message="You must override the target 'define-build.classpath' and define the path 'build.classpath'" />
	</target>

    <target name="generate-source" depends="init" />

	<target name="compile" depends="generate-source, define-build.classpath" if="src.enabled">
		<standard-javac build="${build}" src="${src}">
			<src path="${gensrc}" />
			<classpath refid="build.classpath" />
		</standard-javac>
	</target>

	<target name="make" depends="compile">
		<copy todir="${build}">
			<fileset dir="${src}" erroronmissingdir="false">
				<patternset refid="patternset.exclude.java.and.scm" />
			</fileset>
			<fileset dir="${gensrc}" erroronmissingdir="false">
				<patternset refid="patternset.exclude.java.and.scm" />
			</fileset>
		</copy>
	</target>

	<target name="rebuild" depends="clean,make" />

	<!--
		#######################################################################
			Unit Testing and Code Coverage Targets
		#######################################################################
	-->

	<target name="init.test" if="tests.enabled" depends="init, define-build.classpath">
		<mkdir dir="${test.build}" />
		<mkdir dir="${test.reports}" />

		<path id="base.test.classpath">
			<pathelement location="${build}" />
			<pathelement location="${test.build}" />
			<path refid="build.classpath" />
			<pathelement location="${TLE Custom Build Tasks.base}/lib/junit.jar" />
		</path>
	</target>

	<target name="define-test.classpath" if="tests.enabled" depends="init.test">
		<path id="test.classpath" refid="base.test.classpath" />
	</target>

	<target name="define-test.patternset" if="tests.enabled" depends="init.test">
		<patternset id="test.patternset">
			<include name="**/*Test.class" />
		</patternset>
	</target>

	<target name="compile.test" if="tests.enabled" depends="compile, define-test.classpath, init.test">
		<standard-javac build="${test.build}" src="${test.src}">
			<classpath refid="test.classpath" />
		</standard-javac>
	</target>

	<target name="make.test" if="tests.enabled" depends="make, compile.test">
		<copy todir="${test.build}">
			<fileset dir="${test.src}">
				<patternset refid="patternset.exclude.java.and.scm" />
			</fileset>
		</copy>
	</target>

	<target name="rebuild.test" if="tests.enabled" depends="rebuild, make.test, define-test.patternset" />

	<target name="test" if="tests.enabled" depends="rebuild.test">
		<junit fork="true" forkmode="perBatch" haltonfailure="true">
			<classpath refid="test.classpath" />
			<formatter type="xml" />
			<batchtest todir="${test.reports}">
				<fileset dir="${test.build}">
					<patternset refid="test.patternset" />
				</fileset>
			</batchtest>

			<jvmarg value="-Djava.awt.headless=true" />
		</junit>
	</target>
</project>
