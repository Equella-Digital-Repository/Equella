language: scala
dist: bionic
branches:
  only:
    - develop
    - master
    - /^release\/.+/
    - /^stable-.+/
env:
  global:
    ### AWS START ###
    - secure: m/3VbdtVnnEb8J4MrEhH4w8ELHTu4yGPkHcLQ9WSVNnZ6PskuHvxxpsAVVHz9WKj/9WVI4RJdpv5iouj+gugYUOo2cRGcg9hW9He554fbRfudnkAzBLUV4an71vnoxbSTdc+doGNpyF4rt/jdgVDzpGEsgv61By8C+oPpPjZiXcnjPmuVUyPaJWaJpp9/BpQusAiRjFqcphWeHAAd5Gp76D7OhEGL+y8q4fWXsvN58kbDKMXzs8F3aGyZ0QIApHDdT4FdgVFrt2kjrw/4V8ZaB4poR/8slK1pbsiklY+oamXk+e0Xkwf/B23KEWZZObWlUGIZX40EuzVBSGGq1eLWE96SM+HXN39PYvGPSRJ2lGuGvAr1NSlFwFIukTpW58ZiOVsK/IDoahj1zmhr1xvPmoc6YceSpVqqh2g4UDWJU3mQwNnGwhfn2K/td4pDsazaWYhnm2DjW5e7a03uA5ccf4Cfb2AaqE5ED7hGnTifkQbnykaNXtVLyDVzHf44022FM6ldpEWP2yWrLUhKJ9yNMsmMeYYdWRj/itSdZ895hzXtFO4kcY4NR8MF+7njTx1rwFk1kTsLZ0OX6Z36LUvnVpisLxaRuiN+LGSoTRzPpzVDnGa3lL9TQw3eVbqEUuRDlg1rDOf42KNMhT6nttCwqTthKTewuXA9QuYV5VTuXs=
    - secure: kUfo8ful+ObyD6zPttIxB5dHwCbvUhgZBhvb7cJQ+6xnqdI5WPnSDes2zYyPklh9+p7bt00v3vGLhNem719a3Me3Ju2QjTSZiOtLvZod3klZRokNsgDkJNjNRhtgflThSvcYUbclNZe9pyQ6lz1EOffbTSMJx09OcdkF/gN7B0xK04ha+pWyNb6lqPeKx6q44k+qVotflpFh56eiyNoC4VZ6MgF+N51A/dDQyJJpPhqWkIup7Q8uD2bzPWcz5PN4YBqezrwT4qxbdeejzQ+fwCIT0Ls7B59rivyDp7Esp35TamTbZLK24Je0/Lg/hsW5ybA3/PmFOU2QUdzc2YZ8aT6p9QQjr1F3EDRsyMYmqYUtuFI9KzROoNaQ21If1HoGXZkL83RvCuE36xTDOuLifVWNiEOdII2hb62lW2s/JBcSUS0BlFd2UoxsrPzohBF4gQjQTbWwV9HW+sdHxk20YpU4IG7pyEiQO2Hsuau/M9iCdp0lsgKo6My43kzQSGZTPgESNKWg+YKxy07mgptttErHuDyVrVq6qMMFX+OI8QmUb31GR5j0g3lTPrfpAYyL/Vzlg/T9b8BUc7WYWWL5P41TIb9WMIgmLtARsGkEz/fsa1Cb9tMiZ7jOQLRxq455f54tC55LzhgrO+2elFku8a/cbWXguHzyKf301qHoZGI=
    ### AWS END ###
    - NODE_JS_VERSION=8.11.3
    - AUTOTEST_CONFIG=autotest/travis.conf
    - EQ_EXIFTOOL_PATH=/usr/bin/exiftool
    - S3_DEST_BUILD=s3://edalexdev/travis-openEQUELLA/$TRAVIS_BRANCH/$TRAVIS_BUILD_NUMBER/
    - S3_DEST_LATEST=s3://edalexdev/travis-openEQUELLA/$TRAVIS_BRANCH/latest/
    - S3_REGION_OPT="--region us-east-1"
    - S3_CP_OPTS="--only-show-errors --recursive"
    # set JAVA_HOME to point to the java 8 APT install
    - JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
    # include $HOME/.local/bin for `aws`, and $JAVA_HOME/bin to force use of APT installed Java 8
    - PATH=$JAVA_HOME/bin:$HOME/.local/bin:$PATH
services:
  - postgresql
addons:
  postgresql: "9.6"
  apt:
    packages:
      - chromium-browser
      - ffmpeg
      - libimage-exiftool-perl
      - openjdk-8-jdk
      - python3-pip
      - python3-setuptools
cache:
  directories:
    - "$HOME/.ivy2"
    - "$HOME/.cache"
    - "$HOME/.sbt"

before_install:
  - nvm install $NODE_JS_VERSION
  - node --version
  - pip3 install --user awscli
  # Setup ffmpeg to act like libav-tools
  - sudo ln -s /usr/bin/ffmpeg /usr/bin/avconv
  - sudo ln -s /usr/bin/ffplay /usr/bin/avplay
  - sudo ln -s /usr/bin/ffprobe /usr/bin/avprobe
install:
  - curl -OL https://chromedriver.storage.googleapis.com/76.0.3809.68/chromedriver_linux64.zip
  - unzip chromedriver_linux64.zip
  # Copy down the installer from the build stage - if available
  - aws s3 $S3_REGION_OPT cp ${S3_DEST_BUILD} Installer/target/ --recursive --exclude "*" --include "equella-installer*.zip"
  # retrieve full git history for automatic versioning
  - git fetch --unshallow
before_script:
  # Setup database for functional tests
  - psql -c "CREATE USER equellatests WITH PASSWORD 'password';" -U postgres
  - psql -c "CREATE DATABASE equellatests WITH OWNER = equellatests;" -U postgres
  # Diagnostics: Display java version info
  - which java javac
  - java -version
  - javac -version

stages:
  - build and check
  - functional test
  - finalise
jobs:
  include:
    - stage: build and check
      script:
        - npm install && npm run check
        - sbt headerCheck checkJavaCodeStyle
      name: Check headers, code style and static analysis
      after_failure: aws s3 $S3_REGION_OPT cp target/checkstyle-report.html $S3_DEST_BUILD
    - stage: build and check
      script: sbt installerZip writeLanguagePack writeScriptingJavadoc
      name: Build primary artefacts
      after_success:
        - aws s3 $S3_REGION_OPT cp Source/Server/equellaserver/target/tle-upgrade*.zip $S3_DEST_BUILD
        - aws s3 $S3_REGION_OPT cp Installer/target/equella-installer*.zip             $S3_DEST_BUILD
        - aws s3 $S3_REGION_OPT cp target/reference-language-pack.zip                  $S3_DEST_BUILD
        - aws s3 $S3_REGION_OPT cp target/scriptingapi-javadoc-*.zip                   $S3_DEST_BUILD
    - stage: build and check
      script: sbt test
      name: Unit test
    - stage: build and check
      script: ci/import-export-tool-build.sh
      name: Build the Import/Export tool

    - stage: functional test
      script: sbt -jvm-opts autotest/.jvmopts "project autotest" \
        installEquella startEquella configureInstall setupForTests \
        Tests/test dumpCoverage
      name: Scalacheck
      after_script: ci/scalacheck-save-results.sh Tests
    - stage: functional test
      script: sbt -jvm-opts autotest/.jvmopts "project autotest" \
        installEquella startEquella configureInstall setupForTests \
        Tests/Serial/test dumpCoverage
      name: Scalacheck Serial
      after_script: ci/scalacheck-save-results.sh Tests-Serial
    # Admin
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (admin)
      env: OLD_TEST_SUITE=admin
      after_script: ci/oldtests-save-results.sh
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (admin - new UI)
      env:
        - OLD_TEST_SUITE=admin
        - OLD_TEST_NEWUI=true
      after_script: ci/oldtests-save-results.sh
    # Advanced Script Controls
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (advanced script controls - ASC)
      env: OLD_TEST_SUITE=asc
      after_script: ci/oldtests-save-results.sh
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (advanced script controls - ASC - new UI)
      env:
        - OLD_TEST_SUITE=asc
        - OLD_TEST_NEWUI=true
      after_script: ci/oldtests-save-results.sh
    # Contribution
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (contribution)
      env: OLD_TEST_SUITE=contribution
      after_script: ci/oldtests-save-results.sh
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (contribution - new UI)
      env:
        - OLD_TEST_SUITE=contribution
        - OLD_TEST_NEWUI=true
      after_script: ci/oldtests-save-results.sh
    # Controls
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (controls)
      env: OLD_TEST_SUITE=controls
      after_script: ci/oldtests-save-results.sh
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (controls - new UI)
      env:
        - OLD_TEST_SUITE=controls
        - OLD_TEST_NEWUI=true
      after_script: ci/oldtests-save-results.sh
    # Searching
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (searching)
      env: OLD_TEST_SUITE=searching
      after_script: ci/oldtests-save-results.sh
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (searching - new UI)
      env:
        - OLD_TEST_SUITE=searching
        - OLD_TEST_NEWUI=true
      after_script: ci/oldtests-save-results.sh
    # Users
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (users)
      env: OLD_TEST_SUITE=users
      after_script: ci/oldtests-save-results.sh
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (users - new UI)
      env:
        - OLD_TEST_SUITE=users
        - OLD_TEST_NEWUI=true
      after_script: ci/oldtests-save-results.sh
    # Viewing
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (viewing)
      env: OLD_TEST_SUITE=viewing
      after_script: ci/oldtests-save-results.sh
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (viewing - new UI)
      env:
        - OLD_TEST_SUITE=viewing
        - OLD_TEST_NEWUI=true
      after_script: ci/oldtests-save-results.sh
    # Webservices
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (webservices)
      env: OLD_TEST_SUITE=webservices
      after_script: ci/oldtests-save-results.sh
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (webservices - new UI)
      env:
        - OLD_TEST_SUITE=webservices
        - OLD_TEST_NEWUI=true
      after_script: ci/oldtests-save-results.sh
    # Workflow
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (workflow)
      env: OLD_TEST_SUITE=workflow
      after_script: ci/oldtests-save-results.sh
    - stage: functional test
      script: ci/oldtests-run.sh
      name: TestNG (workflow - new UI)
      env:
        - OLD_TEST_SUITE=workflow
        - OLD_TEST_NEWUI=true
      after_script: ci/oldtests-save-results.sh

    - stage: finalise
      script:
        - aws s3 $S3_REGION_OPT rm --recursive $S3_DEST_LATEST
        - aws s3 $S3_REGION_OPT cp --recursive $S3_DEST_LATEST $S3_DEST_BUILD
      name: Update S3
    - stage: finalise
      script:
        # Copy down previous stored Jacoco coverage exec files
        - aws s3 $S3_REGION_OPT cp ${S3_DEST_BUILD}coverage/ autotest/coverage $S3_CP_OPTS
        # First we need to installEquella so that it extracts the install zip with all the JARs and
        # as a result all the class files which Jacoco needs to map against to generate the
        # coverageReport
        - sbt -jvm-opts autotest/.jvmopts "project autotest" installEquella coverageReport
      name: Generate coverage report
      after_success:
        - aws s3 $S3_REGION_OPT cp autotest/target/coverage-report ${S3_DEST_BUILD}coverage-report/ $S3_CP_OPTS
        - echo "Report is available at https://edalexdev.s3.amazonaws.com/equella_artifacts/$TRAVIS_BRANCH/$TRAVIS_BUILD_NUMBER/coverage-report/index.html"
