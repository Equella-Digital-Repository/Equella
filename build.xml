<project name="EQUELLA-Build" default="build" basedir=".">
	<property name="mm" value="6.4" />

	<target name="generate-build-properties">
		<delete file="build.properties" />

		<echo file="path.tmp" message="temp.source.base=${basedir}" />
		<replace file="path.tmp" token="\" value="/" />
		<property file="path.tmp" />
		<delete file="path.tmp" />

		<condition property="temp.debug.build" value="DEBUG.BUILD = true" else="">
			<istrue value="${ENABLE.DEBUG.BUILD}" />
		</condition>

		<copy file="build.properties.in" tofile="build.properties">
			<filterchain>
				<tokenfilter>
					<replacestring from="@BASEDIR@" to="${temp.source.base}" />
					<replacestring from="@DEBUG.BUILD@" to="${temp.debug.build}" />
				</tokenfilter>
			</filterchain>
		</copy>

		<property file="build.properties" />
		<echo message="Building from: ${source.base}" />
	</target>

	<target name="determine-git" depends="generate-build-properties">
		<condition property="git.bin" value="${git.bin.win32}">
			<os family="windows" />
		</condition>
		<condition property="git.bin" value="${git.bin.unix}">
			<os family="unix" />
		</condition>

		<fail unless="git.bin">Git binary could not be determined</fail>

		<echo>Git binary is ${git.bin}</echo>
	</target>

	<target name="generate-version-properties" depends="determine-git">
		<delete file="version.properties" />

		<exec executable="${git.bin}" outputproperty="display" >
			<arg value="describe" />
			<arg value="--abbrev=0" />
			<arg value="--match" />
			<arg value="${mm}-*" />
		</exec>

		<exec executable="${git.bin}" output="git-describe.txt">
			<arg value="describe" />
			<arg value="--match" />
			<arg value="${mm}-Alpha" />
		</exec>

		<loadfile srcfile="git-describe.txt" property="revision">
			<filterchain>
				<tokenfilter>
					<replaceregex pattern="^.*-(\d+)-g([a-f0-9]+)$" replace="\1" />
				</tokenfilter>
				<deletecharacters chars="\n\r"/>
			</filterchain>
		</loadfile>

		<loadfile srcfile="git-describe.txt" property="commit">
			<filterchain>
				<tokenfilter>
					<replaceregex pattern="^.*-(\d+)-g([a-f0-9]+)$" replace="\2" />
				</tokenfilter>
				<deletecharacters chars="\n\r"/>
			</filterchain>
		</loadfile>

		<delete file="git-describe.txt" />

		<propertyfile file="version.properties" comment="(generated from git describe)">
			<entry key="version.mm" value="${mm}"/>
			<entry key="version.mmr" value="${mm}.r${revision}" />
			<entry key="version.display" value="${display}"/>
			<entry key="version.commit" value="${commit}"/>
		</propertyfile>

		<property file="version.properties" />
		<echo message="Version is ${version.mmr} ${version.display} (${version.commit})"/>
	</target>

	<target name="init-release-dir" depends="generate-build-properties,generate-version-properties">
		<tstamp/>
		<property name="product.dir" location="product" />
		<delete dir="${product.dir}"/>
		<mkdir dir="${product.dir}"/>
		<copy todir="${product.dir}" file="version.properties"/>

		<macrodef name="publish">
			<attribute name="to" />
			<attribute name="from" />
			<element name="filters" optional="true" implicit="true" />
			<sequential>
				<mkdir dir="${product.dir}/@{to}"/>
				<copy toDir="${product.dir}/@{to}">
					<fileset dir="@{from}">
						<filters />
					</fileset>
				</copy>
			</sequential>
		</macrodef>

		<macrodef name="publish-jars">
			<attribute name="to" />
			<attribute name="from" />
			<sequential>
				<publish to="@{to}" from="@{from}">
					<include name="**/*.jar" />
					<include name="**/*.zip" />
				</publish>
			</sequential>
		</macrodef>
	</target>

	<target name="make" depends="generate-build-properties,generate-version-properties">
		<!-- And now we build the EARs (tle, bcat) -->
		<subant target="build-everything" buildpath="${source.base}/Source"/>

		<!-- Build any other tools -->
		<subant inheritAll="false" target="product" buildpath="${TLE Import Export Utils.base}" />
	</target>

	<target name="equella-plugins" depends="generate-build-properties,generate-version-properties">
		<subant target="equella-plugins" buildpath="${source.base}/Source"/>
	</target>

	<target name="clean" depends="generate-build-properties">
		<subant target="clean" buildpath="${source.base}/Source"/>
	</target>

	<target name="javadoc" depends="init-release-dir,make">
		<javadoc destdir="${product.dir}/javadoc">
			<fileset dir="Source/Plugins/Server/" defaultexcludes="yes">
				<include name="com.tle.web.sections/src/**"/>
				<include name="com.tle.web.sections.standard/src/**"/>
			</fileset>

			<classpath>
				<fileset dir="Source/ThirdParty/spring">
					<include name="*.jar"/>
				</fileset>
				<dirset dir="Source/Plugins/Server">
					<include name="*/classes"/>
				</dirset>
			</classpath>
			<package name="com.tle.web.sections.*"/>
		</javadoc>
	</target>

	<target name="gather-coverage-data" depends="init-release-dir, make">
		<property name="coverage.dir" value="coverage" />
		<property name="coverage.product" location="${product.dir}/coverage" />

		<mkdir dir="${coverage.product}"/>

		<!-- Zip up all of the source directories -->
		<zip destfile="${coverage.product}/source.zip">

	<!--	<fileset dir="${source.base}/Source/Server/web/src">
				<include name="**/*.java" />
			</fileset>
	-->
			<mappedresources>
				<fileset dir="${source.base}/Source/Plugins/">
					<include name="*/*/src/**/*.java" />
				</fileset>
				<regexpmapper from="^.*?/src/(.*)$$" to="\1" />
			</mappedresources>
		</zip>

		<!--
			Simliar to above, but for classes.  It would be nice if it could be
			a macro, but the Web project classes are in an irregular directory
			compared to the others.  We also want to exclude the classes from
			generated sources.
		-->
		<zip destfile="${coverage.product}/classes.zip">
    <!--	<fileset dir="${source.base}/Source/Server/web/classes">
				<include name="**/*.class" />
			</fileset>
	-->
			<mappedresources>
				<fileset dir="${source.base}/Source/Plugins/">
					<include name="*/*/classes/**/*.class" />
					<exclude name="*/*/classes/LcmsWebSvc/**" />
				</fileset>
				<regexpmapper from="^.*?/classes/(.*)$$" to="\1" />
			</mappedresources>
		</zip>
	</target>

	<target name="installer" depends="init-release-dir">
		<property name="install.folder" value="equella-${version.mm}-installer-${DSTAMP}"/>
		<subant inheritAll="false" target="enterprise" buildpath="${TLE Installer.base}" />
		<zip destfile="${product.dir}/${install.folder}-(${version.mmr}).zip">
			<zipfileset dir="${TLE Installer.base}/iso/enterprise/learningedge" prefix="${install.folder}"/>
		</zip>
	</target>

	<target name="release" depends="make,init-release-dir,gather-coverage-data,installer">
		<!-- dummy .war for upgrade to embedded tomcat -->
		<touch file="${source.base}/Source/Build/product/resource-centre.war"/>
		<!-- dummy .jar files for 5.1 upgrade -->
		<touch file="${source.base}/Source/Build/product/com.tle.reporting.oda_2.0.0.jar"/>
		<touch file="${source.base}/Source/Build/product/com.tle.reporting.framework_1.0.0.jar"/>
		<!-- Zip for TLE -->
		<zip destfile="${product.dir}/tle-upgrade-${version.mmr} (${version.display}).zip">
			<fileset file="${source.base}/version.properties" />
			<fileset dir="${source.base}/Source/Build/product">
				<include name="resource-centre.war" />
				<include name="equella-server.jar" />
				<include name="conversion-service.jar" />
				<include name="database-upgrader.jar" />
				<include name="com.tle.reporting.oda_2.0.0.jar" />
				<include name="com.tle.reporting.framework_1.0.0.jar" />
				<include name="plugins/**/*.jar" />
				<exclude name="withheld-plugins/**" />
			</fileset>
			<fileset file="Infrastructure/manifest.xml" />
		</zip>

		<!-- Other bits and pieces -->
		<publish-jars to="extra-plugins" from="${source.base}/Source/Build/product/withheld-plugins" />
		<publish-jars to="themes" from="${source.base}/Source/Build/themes" />
		<publish-jars to="language-packs" from="${source.base}/Source/Build/language-packs/" />
		<publish-jars to="jar" from="${TLE Import Export Utils.base}/product" />
	</target>
</project>
